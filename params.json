{"name":"Datatable","tagline":"Class library for working with tabular data, especially CSV files","body":"Hello!\r\n\r\nC# project for reading and writing CSVs. \r\n\r\nLibaries for easy reading, writing, and manipulation of CSV files. Handles linq, creating tables from IEnumerable<T>, dictionaries, in-memory mutable tables,  streaming through large tables.\r\n\r\nIt's an easier data table than System.Data.DataTable.\r\n\r\nThis was extremely handy in a few projects. So I thought I'd put it up on GitHub and polish it up.\r\n\r\n\r\nA few quick examples:\r\n\r\n```CSharp\r\n// Download as CsvTools from Nuget to include in your C# project.\r\nusing DataAccess;\r\n\r\nvar dt = DataTable.New.ReadCsv(filename); // load a CSV from disk\r\n\r\n// Linq against the rows\r\nvar y = from row in dt.Rows where row[\"N\"] == \"3\" \r\n        select row[\"NSquared\"];\r\n\r\n// Linq with strongly-typed parsing, using RowAs<T>() method\r\nclass Entry\r\n{\r\n    public int N { get; set; }\r\n    public int NSquared { get; set; }\r\n}\r\nint y = (from row in dt.RowsAs<Entry>() \r\n         where row.N == 3 \r\n         select row.NSquared).First();\r\n\r\n\r\n// Create a table around an IEnumerable and then save back as a CSV\r\nvar x = from i in Enumerable.Range(1, 5) \r\n        select new { N = i, NSquared = i * i };\r\nDataTable dt = DataTable.New.FromEnumerable(x);\r\ndt.SaveToStream(Console.Out); // write back out as a CSV\r\n\r\n\r\n```\r\n\r\nAlso includes support for reading an excel file (.xlsx)\r\n```CSharp\r\n  var dt = DataTable.New.ReadExcel(@\"c:\\temp\\foo.xlsx\");\r\n  var names = from row in dt.Rows \r\n              where int.Parse(row[\"age\"]) > 10 \r\n              select row[\"Name\"];\r\n```    \r\nSee here for more about reading excel: http://blogs.msdn.com/b/jmstall/archive/2012/04/24/excel-on-azure.aspx ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}